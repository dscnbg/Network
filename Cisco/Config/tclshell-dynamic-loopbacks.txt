proc generate_loopbacks {x} {
 # random number generator
 proc rand_range { min max } { return [expr int(rand() * ($max - $min)) + $min] }
 # define subnet mask lengths
 set len(1) 128.0.0.0
 set len(2) 192.0.0.0
 set len(3) 224.0.0.0
 set len(4) 240.0.0.0
 set len(5) 248.0.0.0
 set len(6) 252.0.0.0
 set len(7) 254.0.0.0
 set len(8) 255.0.0.0
 set len(9) 255.128.0.0
 set len(10) 255.192.0.0
 set len(11) 255.224.0.0
 set len(12) 255.240.0.0
 set len(13) 255.248.0.0
 set len(14) 255.252.0.0
 set len(15) 255.254.0.0
 set len(16) 255.255.0.0
 set len(17) 255.255.128.0
 set len(18) 255.255.192.0
 set len(19) 255.255.224.0
 set len(20) 255.255.240.0
 set len(21) 255.255.248.0
 set len(22) 255.255.252.0
 set len(23) 255.255.254.0
 set len(24) 255.255.255.0
 set len(25) 255.255.255.128
 set len(26) 255.255.255.192
 set len(27) 255.255.255.224
 set len(28) 255.255.255.240
 set len(29) 255.255.255.248
 set len(30) 255.255.255.252
 set len(31) 255.255.255.254
 set len(32) 255.255.255.255
# Iterate the loop $x times
  for {set n 1} {$n<=$x} {incr n 1} {
   # generate random IPv4 address
   set a [rand_range 1 223]
   set b [rand_range 1 255]
   set c [rand_range 1 255]
   set d [rand_range 1 255]  
   # generate random IPv4 mask
   set y [rand_range 1 32]
   # generate random IPv6 address
   set e [format %x [rand_range 1 65534]]
   set f [format %x [rand_range 1 65534]]
   set g [format %x [rand_range 1 65534]]
   set h [format %x [rand_range 1 65534]]
   set i [format %x [rand_range 1 65534]]
   set j [format %x [rand_range 1 65534]]
   set k [format %x [rand_range 1 65534]]
   # generate random IPv6 mask
   set z [rand_range 16 64]
   # set error check variable
   set m 0
   # set $LOOBACK_NUMBER
   set LOOPBACK_NUMBER [expr 10000 + $n]
   # send IOS exec commands
   set OUTPUT [ ios_config "interface Loopback$LOOPBACK_NUMBER" "ip address $a.$b.$c.$d $len($y)" "ipv6 address 2001:$e:$f:$g:$h:$i:$j:$k/$z" ]
   # Split the OUTPUT variable into individual lines, and for each line place it into the variable LINE
   foreach LINE [split $OUTPUT "\n"] {
   # check if the LINE variable contains an indication that there is a problem with a random address
   # and if so, set a variable m to a specific value
   if { [regexp "is overlapping with" $LINE] } {
   set m 1 } elseif { [regexp "overlaps with" $LINE] } {
   set m 1 } elseif { [regexp "Bad mask" $LINE] } {
   set m 1 }
   # if the variable m is 1 decrement the variable n used to control the for loop by 1
   # forcing the most recent loopback to be re-iterated by the above script
   if { [expr $m==1] } {
   incr n -1 }
   }
  }
}