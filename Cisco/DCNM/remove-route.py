import http.client
import ssl
import base64
import string
import json
import argparse
import ipaddress

import logging
import logging.handlers

from ipaddress import ip_address
from ipaddress import ip_network

from functions import getRestToken
from functions import DCNMPost
from functions import DCNMget

##### Settings from settings.ini
from configparser import ConfigParser
config = ConfigParser()

config.read('C:/Temp/Git/Cisco/DCNM/settings.ini')

dcnmuser = config.get('DCNM', 'dcnmuser')
dcnmpassword = config.get('DCNM', 'dcnmpassword')
dcnmserver = config.get('DCNM', 'dcnmserver')
ixnserial = config.get('DCNM', 'ixnserial')
cyoserial = config.get('DCNM', 'cyoserial')
######

uri = "/rest/control/policies/bulk-create"

logger = logging.getLogger()
logging.basicConfig(filename="remove-route.log", filemode='a', format='%(asctime)s.%(msecs)03d %(levelname)s - %(funcName)s: %(message)s',  datefmt='%Y-%m-%d %H:%M:%S')
logger.setLevel(logging.DEBUG)
#logger.debug("This is a debug message")
#logger.info("For your info")
#logger.warning("This is a warning message")
#logger.error("This is an error message")
#logger.critical("This is a critical message")


parser = argparse.ArgumentParser(description='DCNM New IPv4 Route')

parser.add_argument("--v", required=True, type=str, help="VRF Name")
parser.add_argument("--p", required=True, type=ip_network, help="Prefix IPv4")
parser.add_argument("--n", required=True, type=ip_address, help="Next Hop")
parser.add_argument("--r", required=True, type=str, help="Route Name")
parser.add_argument("--t", required=True, type=int, help="Route Tag")


args = parser.parse_args()

vrfName = args.v
prefix = args.p
nextHop = args.n
rname = args.r
tag = args.t

logger.info('====================================== NEW ======================================')
logger.info('Settings %s', args)

# Get Token
token = getRestToken(dcnmuser, dcnmpassword, dcnmserver)

# Alle Policies IXN abholen

ixnuri = "/rest/control/policies/switches?serialNumber=" + ixnserial
ixnpol = DCNMget(ixnuri, dcnmserver, token)


# Alle Policies CYO abholen

cyouri = "/rest/control/policies/switches?serialNumber=" + cyoserial
cyopol = DCNMget(cyouri, dcnmserver, token)

# passende policies in ixn finden
ixnroutes = []
ixnids = []
for ipol in ixnpol:
    if ipol['templateName'] == 'dop_static_named_v4':
        if (ipol['nvPairs']['VRF_NAME'] == vrfName)and (ip_address(ipol['nvPairs']['NEXT_HOP_IP']) == nextHop) and (ip_network(ipol['nvPairs']['IP_PREFIX']) == prefix) and (ipol['nvPairs']['RNAME'] == rname) and (int(ipol['nvPairs']['TAG']) == tag):
            ixnroutes.append(ipol)
            ixnids.append(ipol['policyId'])


logger.info('INX POL ID %s', ixnids)
logger.info('INX POL %s', ixnroutes)

# passende policies in cyo finden

cyoroutes = []
cyoids = []

for cpol in cyopol:
    if cpol['templateName'] == 'dop_static_named_v4':
        if (cpol['nvPairs']['VRF_NAME'] == vrfName)and (ip_address(cpol['nvPairs']['NEXT_HOP_IP']) == nextHop) and (ip_network(cpol['nvPairs']['IP_PREFIX']) == prefix) and (cpol['nvPairs']['RNAME'] == rname) and (int(cpol['nvPairs']['TAG']) == tag):
            cyoroutes.append(cpol)
            cyoids.append(cpol['policyId'])

logger.info('CYO POL ID %s', cyoids)
logger.info('CYO POL %s', cyoroutes)


# mark ixn deleted

ixnroutes = list(ixnroutes)

for ir in ixnroutes:
    ir['priority'] = -500
    ir['deleted'] = True
    ir.pop('templateContentType', None)
    ir.pop('generatedConfig', None)
    ir.pop('autoGenerated', None)
    ir.pop('status', None)
    ir.pop('statusOn', None)
    ir.pop('createdOn', None)
    ir.pop('modifiedOn', None)
    ir.pop('fabricName', None)
    ir.pop('resourcesLinked', None)

logger.info('INX DELETE POL %s', ixnroutes)

# mark cyo deleted

cyoroutes = list(cyoroutes)

for cy in cyoroutes:
    cy['priority'] = -500
    cy['deleted'] = True
    cy.pop('templateContentType', None)
    cy.pop('generatedConfig', None)
    cy.pop('autoGenerated', None)
    cy.pop('status', None)
    cy.pop('statusOn', None)
    cy.pop('createdOn', None)
    cy.pop('modifiedOn', None)
    cy.pop('fabricName', None)
    cy.pop('resourcesLinked', None)

logger.info('CYO DELETE POL %s', cyoroutes)
